<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CurrentWrite Documentation Site</title>
    <link>/</link>
    <description>Recent content on CurrentWrite Documentation Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/_header/</guid>
      <description>CurrentWriter 사용가이드</description>
    </item>
    
    <item>
      <title>AbsInterpolateScale</title>
      <link>/post/handler/absinterpolatescale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/absinterpolatescale/</guid>
      <description> Goal까지 Target의 localScale을 Time초 동안 Curve를 따라 조절합니다.
파라미터  Target : 움직일 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것) Curve : EaseIn, EaseOut 중 하나(EaseIn은 서서히 빠르게, EaseOut은 서서히 느리게) Goal : 목표로 하는 localScale값 Time : 초단위.  </description>
    </item>
    
    <item>
      <title>ClipMidiEvent</title>
      <link>/post/event/clipmidievent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/clipmidievent/</guid>
      <description>ClipName을 가지는 clip이 포함하고 있는 midi파일과 현재 재생 시간으로부터, 현재 시간 에 대응되는 midi 메시지가 있는지 확인합니다. 간단하게 생각한다면 clip 재생 중 음이 재생되는 타이밍에 이 이벤트가 활성화 되는 것입니다.
파라미터  ClipName : 검사할 clip의 이름 Channel : 검사할 midi메시지의 channel. 이 값은 clip을 제작한 아티스트가 정하는 값을 듣고 설정하면 됩니다. (예 : 아티스트가 드럼 소리에 channel 9를 배정했다고 한다면, 드럼 소리를 감지할 때 이 필드에 9를 넣으면 됩니다.</description>
    </item>
    
    <item>
      <title>DoNothing</title>
      <link>/post/handler/donothing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/donothing/</guid>
      <description>아무 것도 하지 않습니다. 특정 조건을 검사할 타이밍에 사용할 더미 핸들러가 필요할 때 쓰거나, 다른 핸들러의 더미 종착점으로 사용합니다. 이 핸들러는 시작 하자마자 거의 바로 직후 끝납니다.</description>
    </item>
    
    <item>
      <title>Event</title>
      <link>/post/event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/</guid>
      <description>이벤트는 핸들러를 시작하거나, 핸들러 사이의 전환 조건으로 사용할 수 있습니다. 화면 위에 정의된 이벤트 노드와 핸들러를 연결하거나, 핸들러-핸들러 간의 Connection에서 Condition으로 추가하세요.</description>
    </item>
    
    <item>
      <title>Handler</title>
      <link>/post/handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/</guid>
      <description>핸들러는 어떤 이벤트에 대하여 컨커런트하게, 정해진 시간 동안 실행될 처리 루틴을 말합니다. 각 핸들러가 수행될 시간은 핸들러의 종류마다 다르며, 일부는 사용자가 정하는 파라미터에 따라 달라지기도 합니다.
모든 핸들러는 이벤트와 마찬가지로 최상단에 이름을 적을 수 있는 창이 있습니다. 사용자가 원하는 이름을 붙여주세요.</description>
    </item>
    
    <item>
      <title>InstantiatePrefab</title>
      <link>/post/handler/instantiateprefab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/instantiateprefab/</guid>
      <description> Prefab을 Parent와 LocalPos를 설정하여 생성합니다.
이 핸들러는 실행되자마자 거의 바로 종료됩니다.
파라미터  Prefab : 생성할 Prefab의 이름. Assets/Resources 폴더를 기준으로 한다. LocalPos : 생성될 게임 오브젝트의 localPosition값 Parent : Parent로 삼을 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것)  </description>
    </item>
    
    <item>
      <title>InterpolateMove</title>
      <link>/post/handler/interpolatemove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/interpolatemove/</guid>
      <description> (현재 위치+Delta)까지 Target의 position을 Time초 동안 Curve를 따라 조절합니다.
파라미터  Target : 움직일 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것) Curve : EaseIn, EaseOut 중 하나(EaseIn은 서서히 빠르게, EaseOut은 서서히 느리게) Delta : 현재 위치로부터 상대적으로 움직일 거리. (x값)|(y값)|(z값)의 포맷으로 작성 Time : 초단위.  </description>
    </item>
    
    <item>
      <title>InterpolateScale</title>
      <link>/post/handler/interpolatescale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/interpolatescale/</guid>
      <description> (현재 scale+Delta)까지 Target의 localScale을 Time초 동안 Curve를 따라 조절합니다.
파라미터  Target : 움직일 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것) Curve : EaseIn, EaseOut 중 하나(EaseIn은 서서히 빠르게, EaseOut은 서서히 느리게) Delta : 현재 위치로부터 상대적으로 움직일 scale차이. (x값)|(y값)|(z값)의 포맷으로 작성 Time : 초단위.  </description>
    </item>
    
    <item>
      <title>KeyDownEvent</title>
      <link>/post/event/keydownevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/keydownevent/</guid>
      <description> KeyCode의 key가 눌렸을 때 활성화됩니다.
파라미터  KeyCode : 검사할 key의 KeyCode. 선택할 수 있는 키의 리스트는 유니티 KeyCode클래스 문서를 참조해주세요.  </description>
    </item>
    
    <item>
      <title>KeyUpEvent</title>
      <link>/post/event/keyupevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/keyupevent/</guid>
      <description> KeyCode의 key가 떼어졌을 때 활성화됩니다.
파라미터  KeyCode : 검사할 key의 KeyCode. 선택할 수 있는 키의 리스트는 유니티 KeyCode클래스 문서를 참조해주세요.  </description>
    </item>
    
    <item>
      <title>MoveConstant</title>
      <link>/post/handler/moveconstant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/moveconstant/</guid>
      <description> 일정한 속력(Velocity)로 Target을 Duration만큼 움직입니다.
파라미터  Target : 움직일 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것) Velocity : (x값)|(y값)|(z값) 포맷으로 작성 Duration : 초단위. inf를 적을 경우 무한정  </description>
    </item>
    
    <item>
      <title>PlayClip</title>
      <link>/post/handler/playclip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/playclip/</guid>
      <description> ClipName의 이름을 가지는 clip을 재생합니다. 이 핸들러는 clip이 재생되는 동안 유지됩니다. 반대로 이 핸들러가 어떤 이유에서 중지되면, 이 핸들러에 의해 재생되던 clip도 재생중지됩니다.
파라미터  ClipName : 재생할 clip의 이름. root파일에 명시되어 있다.(피실험자는 root파일에 대해서 신경 쓰지 않아도 된다.) Loop : true, false 중 하나의 값. true일 경우 이 핸들러는 무한정 지속되며, clip도 무한정 반복된다.  </description>
    </item>
    
    <item>
      <title>SceneReadyEvent</title>
      <link>/post/event/scenereadyevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/scenereadyevent/</guid>
      <description>어플리케이션이 처음 시작되고, Scene이 초기화 된 뒤 단 한 번 활성화됩니다. 시작 후 바로 시작해야 하는 핸들러가 있다면 이 이벤트를 응용할 수 있습니다.
이 이벤트는 여러 번 정의하지 말아주세요.</description>
    </item>
    
    <item>
      <title>SendMessageOnce</title>
      <link>/post/handler/sendmessageonce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/sendmessageonce/</guid>
      <description> Target이 가지고 있는 MonoBehaviour에서 Message라는 이름을 가지는 함수를 Param 인자를 주어 호출합니다. 이 함수는 string 하나를 받는 함수여야 합니다.
이 핸들러는 실행되자마자 거의 바로 종료됩니다.
파라미터  Target : 움직일 GameObject의 이름(Hierarchy 창에서 확인 가능한 그것) Message : 호출할 메서드의 이름 Param : 메서드로 전달할 string  </description>
    </item>
    
    <item>
      <title>Trigger</title>
      <link>/post/handler/trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/trigger/</guid>
      <description> Name의 이름을 가지는 변수를 하나 생성하고, 활성화 합니다. 이 변수는 TriggeredEvent이벤트를 통해 검사할 수 있습니다. 이 변수는 한 번 TriggeredEvent에서 감지되면 바로 비활성화됩니다.
이 핸들러는 실행되자마자 거의 바로 종료됩니다.
파라미터  Name : Trigger로 생성할 변수의 이름. TriggeredEvent에서 사용됩니다.  </description>
    </item>
    
    <item>
      <title>TriggeredEvent</title>
      <link>/post/event/triggeredevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/event/triggeredevent/</guid>
      <description> Trigger 핸들러에 의해 Name이라는 이름을 가지는 변수가 활성화 되었는지 체크합니다.
파라미터  Name : 변수의 이름. Trigger 핸들러 참조.  </description>
    </item>
    
    <item>
      <title>Wait</title>
      <link>/post/handler/wait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/handler/wait/</guid>
      <description> Duration동안 기다립니다. 주로 핸들러 사이의 딜레이를 만들거나, 다른 조건을 무한정 기다리는데 사용합니다.
파라미터  Duration : 초단위. inf를 적을 경우 무한정  </description>
    </item>
    
    <item>
      <title>예시</title>
      <link>/post/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/examples/</guid>
      <description>예시 CurrentWriter의 사용 예시들을 소개합니다.
왼쪽/오른쪽 움직이기 왼쪽 화살표를 누르는 동안 player 게임오브젝트가 왼쪽으로 0.50의 속력으로 꾸준히 움직입니다. 오른쪽 화살표를 누르는 동안 오른쪽으로 0.50의 속력으로 꾸준히 움직입니다.
그룹 활용 예시 A 키를 누르는 동안 0.1초 간격으로 bullet1을 player 밑에 생성합니다.
클립 활용 예시 Scene이 처음 초기화 되었을 때, demo_bass_1 클립을 재생하기 시작합니다. 이 클립의 재생이 끝나면 다시 처음부터 재생합니다. 만약 이 클립의 재생이 끝났을 때, TriggeredEvent1이 만족되었다면, demo_bass_1의 재생을 중지하고 demo_bass_2의 재생을 시작합니다.</description>
    </item>
    
    <item>
      <title>처음 시작하기</title>
      <link>/post/gettingstarted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/gettingstarted/</guid>
      <description>CurrentWriter의 기본 사용법 CurrentWriter는 여러 개의 이벤트 노드와, 핸들러 노드들을 화면 상에 배치하고, 연결하여 사용합니다. 다음은 몇 가지 기본 기능입니다.
노드/커넥션 추가 빈 공간에 오른쪽 클릭하고, 에디터 화면에 노드를 추가합니다
각 노드의 파라미터를 키보드를 통해 편집할 수 있습니다. 각 파라미터의 상세한 의미는 문서를 참조해주세요
노드의 빈 공간에 마우스 왼쪽 드래그를 해서 노드를 움직일 수 있습니다.
각 노드나 Connection에 오른쪽 클릭을 하면 삭제하는 메뉴에 접근할 수 있습니다.
Connection으로 핸들러 간 흐름 조작 한 노드의 시작/끝을 클릭하고, 다른 노드의 끝/시작을 클릭하여 Connection을 추가합니다.</description>
    </item>
    
  </channel>
</rss>